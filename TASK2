/*GAME OF LIFE SIMULATION
Implement Conway's Game of Life, a cellular automaton
simulation.
Allow users to set the initial state, run the simulation,
and observe the evolution of cells*/
#include <iostream>
#include <vector>
#include <unistd.h> // for sleep() function

using namespace std;

const int ROWS = 10;
const int COLS = 10;

// Function to allow user to set the initial state of the grid
void initializeGrid(vector<vector<int>>& grid) {
    int liveCells, row, col;
    cout << "Enter the number of live cells to initialize: ";
    cin >> liveCells;
    
    for (int i = 0; i < liveCells; ++i) {
        cout << "Enter the row and column for live cell " << i + 1 << ": ";
        cin >> row >> col;
        if (row >= 0 && row < ROWS && col >= 0 && col < COLS) {
            grid[row][col] = 1; // Set the cell as alive
        } else {
            cout << "Invalid position! Try again." << endl;
            --i; // Repeat this iteration
        }
    }
}

// Function to display the grid
void displayGrid(const vector<vector<int>>& grid) {
    for (int row = 0; row < ROWS; ++row) {
        for (int col = 0; col < COLS; ++col) {
            cout << (grid[row][col] ? "O" : ".") << " ";
        }
        cout << endl;
    }
    cout << endl;
}

// Function to count the number of live neighbors of a cell
int countLiveNeighbors(const vector<vector<int>>& grid, int row, int col) {
    int liveNeighbors = 0;
    for (int i = -1; i <= 1; ++i) {
        for (int j = -1; j <= 1; ++j) {
            if (i == 0 && j == 0) continue; // Skip the cell itself
            int newRow = row + i;
            int newCol = col + j;
            if (newRow >= 0 && newRow < ROWS && newCol >= 0 && newCol < COLS) {
                liveNeighbors += grid[newRow][newCol];
            }
        }
    }
    return liveNeighbors;
}

// Function to apply the rules of the game and update the grid
void updateGrid(vector<vector<int>>& grid) {
    vector<vector<int>> newGrid(ROWS, vector<int>(COLS, 0));

    for (int row = 0; row < ROWS; ++row) {
        for (int col = 0; col < COLS; ++col) {
            int liveNeighbors = countLiveNeighbors(grid, row, col);

            // Apply the rules of Conway's Game of Life
            if (grid[row][col] == 1) {
                // Cell dies unless it has 2 or 3 neighbors
                if (liveNeighbors < 2 || liveNeighbors > 3) {
                    newGrid[row][col] = 0;
                } else {
                    newGrid[row][col] = 1;
                }
            } else {
                // A dead cell comes to life if it has exactly 3 live neighbors
                if (liveNeighbors == 3) {
                    newGrid[row][col] = 1;
                }
            }
        }
    }

    // Update the grid with the new state
    grid = newGrid;
}

int main() {
    vector<vector<int>> grid(ROWS, vector<int>(COLS, 0));

    initializeGrid(grid);  // Allow the user to set the initial state

    while (true) {
        displayGrid(grid);
        updateGrid(grid);
        sleep(1); // Pause for 1 second before the next generation
    }

    return 0;
}
